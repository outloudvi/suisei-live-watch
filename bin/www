#!/usr/bin/env node

const app = require("../src/index").app;
const updateConfigAndInit = require("../src/index").updateConfigAndInit;
const utils = require("../src/utils");
const arg = require("arg");
const fs = require("fs");
const fetch = require("node-fetch");

const args = arg({
  // Types
  "--help": Boolean,
  "--version": Boolean,
  "--config": String,
  "--subscribe": Boolean,

  // Aliases
  "-c": "--config",
  "-v": "--version",
  "-s": "--subscribe",
});

if (args["--help"]) {
  console.log(`
  suisei-live-watch --config file [--version] [--subscribe]

  --config file, -c file : Load the config.
  --version, -v          : Show package version.
  --subscribe, -s        : Send subscription requests to PSHB servers.`);
  process.exit(0);
} else if (args["--version"]) {
  console.log(JSON.parse(fs.readFileSync("../package.json")).version);
  process.exit(0);
}

let configPath = args["--config"] || "./config.json";
let file;
let config;

try {
  file = fs.readFileSync(configPath);
} catch (e) {
  console.error(`Failed to read config file: ${configPath}`);
  process.exit(1);
}

try {
  config = JSON.parse(file);
} catch (e) {
  console.error(`Failed to parse config file: ${configPath}`);
  process.exit(1);
}

const SERVER_PORT = utils.getServerPort(config);
const SUBPATH = utils.getSubpath(config);

if (SUBPATH[0] != "/") {
  console.error(
    `Your subpath (${SUBPATH}) doesn't start with "/", which will cause problems.`
  );
  process.exit(1);
}

updateConfigAndInit(config);

app.listen(SERVER_PORT, () =>
  console.log(
    `SLW server listening on port ${SERVER_PORT} and path ${SUBPATH}.`
  )
);

if (args["--subscribe"]) {
  if (!config.CALLBACK_URL) {
    console.log("No CALLBACK_URL present. Cannot subscribe.");
  } else {
    for (let [key, val] of Object.entries(config.TOPICS || {})) {
      fetch("https://pubsubhubbub.appspot.com/subscribe", {
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
        },
        body: `hub.callback=${encodeURIComponent(
          config.CALLBACK_URL
        )}&hub.topic=${encodeURIComponent(
          val
        )}&hub.verify=async&hub.mode=subscribe"`,
        method: "POST",
      })
        .then(() => {
          console.log(`Subscription request sent for ${key}`);
        })
        .catch((err) => {
          console.log(`Subscription request failed for ${key}: ${err}`);
        });
    }
  }
}
